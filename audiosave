#!/usr/bin/env python3

import argparse
import os
import youtube_dl

APP_NAME = 'audiosave'

if os.path.isfile('/usr/share/icons/gnome/32x32/mimetypes/audio-x-generic.png'):
    ICON_SUCCESS = '/usr/share/icons/gnome/32x32/mimetypes/audio-x-generic.png'
else:
    ICON_SUCCESS = None

if os.path.isfile('/usr/share/icons/gnome/32x32/status/error.png'):
    ICON_FAILURE = '/usr/share/icons/gnome/32x32/status/error.png'
else:
    ICON_FAILURE = None


def notify(title, body=None, icon=None):
    try:
        import gi
        gi.require_version('Notify', '0.7')
        from gi.repository import Notify
        from gi.repository import GdkPixbuf
    except:
        return

    Notify.init(APP_NAME)
    notification = Notify.Notification.new(title, body)

    if icon:
        image = GdkPixbuf.Pixbuf.new_from_file(icon)
        notification.set_icon_from_pixbuf(image)
        notification.set_image_from_pixbuf(image)

    notification.show()
    Notify.uninit()


def download(url, codec, bitrate, quiet=True):
    ydl_opts = {
        'format': 'bestaudio/best',
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': codec,
            'preferredquality': str(bitrate),
        }],
        'outtmpl': '%(title)s.%(etx)s',
        'quiet': quiet
    }

    with youtube_dl.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=False)
        status = ydl.download([url])
        return {'status': status, 'info': info}


def main():
    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument('url', help='URL')
    arg_parser.add_argument('--codec', default='vorbis', help='Audio codec')
    arg_parser.add_argument('--bitrate', default=192, help='Bitrate')
    arg_parser.add_argument('-d', '--dir', help='Save directory')
    arg_parser.add_argument('-v', '--verbose', action='store_true',
                            help='Show all output')
    args = arg_parser.parse_args()

    if args.dir:
        os.chdir(args.dir)

    result = download(args.url, codec=args.codec, bitrate=args.bitrate,
             quiet=not(args.verbose))
    try:
        status = result['status']
        title = result['info'].get('title', None)
    except Exception as e:
        if args.verbose:
            print(e)
        status = -1

    if status == 0:
        notify('Downloaded \'{}\''.format(title), icon=ICON_SUCCESS)
    else:
        notify('Download failed for \'{}\''.format(title), icon=ICON_FAILURE)


if __name__ == '__main__':
    main()
