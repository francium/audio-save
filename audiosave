#!/usr/bin/env python3

# Error Codes:
#   0       Success
#   -1      youtube_dl error
#   -2      file_exists_ no_overwrite


import argparse
import os
import youtube_dl

import utils

APP_NAME = 'audiosave'
OUTPUT_EXT = '.ogg'

if os.path.isfile('/usr/share/icons/gnome/32x32/mimetypes/audio-x-generic.png'):
    ICON_SUCCESS = '/usr/share/icons/gnome/32x32/mimetypes/audio-x-generic.png'
else:
    ICON_SUCCESS = None

if os.path.isfile('/usr/share/icons/gnome/32x32/status/error.png'):
    ICON_FAILURE = '/usr/share/icons/gnome/32x32/status/error.png'
else:
    ICON_FAILURE = None


def coloredText(message, type):
    try:
        from termcolor import colored
    except ModuleNotFoundError:
        # TODO Manually construct message with ANSI/VT100 CODES
        return message

    if type == 'success':
        return colored(message, 'green')
    elif type == 'error':
        return colored(message, 'red')
    else:
        return message


def notify(title, body=None, icon=None):
    try:
        import gi
        gi.require_version('Notify', '0.7')
        from gi.repository import Notify
        from gi.repository import GdkPixbuf
    except:
        return

    Notify.init(APP_NAME)
    notification = Notify.Notification.new(title, body)

    if icon:
        image = GdkPixbuf.Pixbuf.new_from_file(icon)
        notification.set_icon_from_pixbuf(image)
        notification.set_image_from_pixbuf(image)

    notification.show()
    Notify.uninit()


def check_file_exists(file_path):
    if os.path.isfile(file_path):
        return True
    else:
        return False


def download(url, codec, bitrate, quiet=True):
    ydl_opts = {
        'format': 'bestaudio/best',
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': codec,
            'preferredquality': str(bitrate),
        }],
        'outtmpl': '%(title)s.%(etx)s',
        'quiet': quiet
    }

    with youtube_dl.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=False)

        title = info.get('title', None)
        if check_file_exists(title + OUTPUT_EXT):
            if utils.yesno('{} already exists, overwrite it? (y/n)'
                                 .format(title)):
                overwrite = True
            else:
                overwrite = False
        else:
            overwrite = True

        if overwrite:
            # youtube-dl doesn't seem to raise exceptions (further testing
            # is needed)
            try:
                status = ydl.download([url])
            except:
                status = -1

            return {'status': status, 'info': info}
        else:
            return {'status': -2}


def main():
    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument('url', help='URL')
    arg_parser.add_argument('--codec', default='vorbis', help='Audio codec')
    arg_parser.add_argument('--bitrate', default=192, help='Bitrate')
    arg_parser.add_argument('-d', '--dir', help='Save directory')
    arg_parser.add_argument('-v', '--verbose', action='store_true',
                            help='Show all output')
    arg_parser.add_argument('-V', '--notify', action='store_true',
                            help='Show notification (warning: shows Warning'
                                 ' message)')
    args = arg_parser.parse_args()

    if args.dir:
        os.chdir(args.dir)

    result = download(args.url, codec=args.codec, bitrate=args.bitrate,
             quiet=not(args.verbose))
    status = result['status']
    if status != -2:
        title = result['info'].get('title', None)

    if status == 0:
        message = coloredText('Downloaded \'{}\''.format(title), 'success')
        print(message)
        if args.notify:
            notify(message, icon=ICON_SUCCESS)
        return 0
    if status == -2:
        return 0
    else:
        message = coloredText('Download failed for "{}"'.format(title), 'error')
        body = 'Error {}'.format(status)
        print(message)
        print(body)
        if args.notify:
            notify(message, body, icon=ICON_FAILURE)
        return status


if __name__ == '__main__':
    main()
